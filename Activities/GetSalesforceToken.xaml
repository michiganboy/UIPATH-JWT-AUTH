<?xml version="1.0" encoding="UTF-8"?>
<Activity x:Class="SalesforceJWT.GetSalesforceToken" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib">
  <Activity.Arguments>
    <InArgument x:TypeArguments="s:String" x:Key="ClientId" />
    <InArgument x:TypeArguments="s:String" x:Key="Username" />
    <InArgument x:TypeArguments="s:String" x:Key="LoginUrl" />
    <InArgument x:TypeArguments="s:String" x:Key="PrivateKeyPath" />
    <OutArgument x:TypeArguments="s:String" x:Key="AccessToken" />
    <OutArgument x:TypeArguments="s:String" x:Key="InstanceUrl" />
    <OutArgument x:TypeArguments="s:DateTime" x:Key="TokenExpiry" />
  </Activity.Arguments>
  
  <Sequence DisplayName="Get Salesforce Token">
    
    <!-- Variables -->
    <Variable x:TypeArguments="s:String" Name="PrivateKey" />
    <Variable x:TypeArguments="s:String" Name="JWT" />
    <Variable x:TypeArguments="s:String" Name="TokenEndpoint" />
    <Variable x:TypeArguments="s:String" Name="RequestBody" />
    <Variable x:TypeArguments="s:String" Name="ResponseBody" />
    <Variable x:TypeArguments="s:Int32" Name="StatusCode" />
    <Variable x:TypeArguments="s:Object" Name="TokenResponse" />
    
    <!-- Read Private Key -->
    <ui:ReadTextFile DisplayName="Read Private Key" FileName="[PrivateKeyPath]" Text="[PrivateKey]" />
    
    <!-- Generate JWT -->
    <InvokeMethod DisplayName="Generate JWT" MethodName="GenerateJWT">
      <InvokeMethod.TargetObject>
        <InArgument x:TypeArguments="s:Object">[New SalesforceJWT.JWTGenerator()]</InArgument>
      </InvokeMethod.TargetObject>
      <InvokeMethod.Parameters>
        <InArgument x:TypeArguments="s:String" x:Key="clientId">[ClientId]</InArgument>
        <InArgument x:TypeArguments="s:String" x:Key="username">[Username]</InArgument>
        <InArgument x:TypeArguments="s:String" x:Key="loginUrl">[LoginUrl]</InArgument>
        <InArgument x:TypeArguments="s:String" x:Key="privateKey">[PrivateKey]</InArgument>
      </InvokeMethod.Parameters>
      <InvokeMethod.Result>
        <OutArgument x:TypeArguments="s:String">[JWT]</OutArgument>
      </InvokeMethod.Result>
    </InvokeMethod>
    
    <!-- Set Token Endpoint -->
    <Assign DisplayName="Set Token Endpoint">
      <Assign.To>
        <OutArgument x:TypeArguments="s:String">[TokenEndpoint]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:String">[LoginUrl + "/services/oauth2/token"]</InArgument>
      </Assign.Value>
    </Assign>
    
    <!-- Prepare Request Body -->
    <Assign DisplayName="Prepare Request Body">
      <Assign.To>
        <OutArgument x:TypeArguments="s:String">[RequestBody]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:String">["grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&amp;assertion=" + JWT]</InArgument>
      </Assign.Value>
    </Assign>
    
    <!-- Exchange JWT for Access Token with Error Handling -->
    <TryCatch DisplayName="Exchange JWT for Access Token">
      <Try>
        <ui:HttpRequest DisplayName="Exchange JWT for Access Token" Method="POST" Url="[TokenEndpoint]">
          <ui:HttpRequest.Headers>
            <scg:Dictionary x:TypeArguments="s:String, s:String">
              <KeyValuePair x:Key="Content-Type" x:Value="application/x-www-form-urlencoded" />
            </scg:Dictionary>
          </ui:HttpRequest.Headers>
          <ui:HttpRequest.Body>
            <InArgument x:TypeArguments="s:String">[RequestBody]</InArgument>
          </ui:HttpRequest.Body>
          <ui:HttpRequest.Result>
            <OutArgument x:TypeArguments="s:String">[ResponseBody]</OutArgument>
          </ui:HttpRequest.Result>
          <ui:HttpRequest.StatusCode>
            <OutArgument x:TypeArguments="s:Int32">[StatusCode]</OutArgument>
          </ui:HttpRequest.StatusCode>
        </ui:HttpRequest>
      </Try>
      <Catch>
        <ui:InvokeWorkflowFile DisplayName="Handle Error" WorkflowFileName="Activities\HandleError.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <InArgument x:TypeArguments="s:Exception" x:Key="Exception">[Exception]</InArgument>
            <InArgument x:TypeArguments="s:String" x:Key="Context">[&quot;JWT Token Exchange&quot;]</InArgument>
            <InArgument x:TypeArguments="s:Int32" x:Key="StatusCode">[0]</InArgument>
            <InArgument x:TypeArguments="s:String" x:Key="ResponseBody">[&quot;&quot;]</InArgument>
            <InArgument x:TypeArguments="s:Boolean" x:Key="EnableDetailedLogging">[True]</InArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
      </Catch>
    </TryCatch>
    
    <!-- Check Response Status -->
    <If DisplayName="Check Response Status">
      <If.Condition>
        <InArgument x:TypeArguments="s:Boolean">[StatusCode = 200]</InArgument>
      </If.Condition>
      <If.Then>
        <!-- Parse Response -->
        <InvokeMethod DisplayName="Parse Token Response" MethodName="ParseTokenResponse">
          <InvokeMethod.TargetObject>
            <InArgument x:TypeArguments="s:Object">[New SalesforceJWT.TokenParser()]</InArgument>
          </InvokeMethod.TargetObject>
          <InvokeMethod.Parameters>
            <InArgument x:TypeArguments="s:String" x:Key="responseBody">[ResponseBody]</InArgument>
          </InvokeMethod.Parameters>
          <InvokeMethod.Result>
            <OutArgument x:TypeArguments="s:Object">[TokenResponse]</OutArgument>
          </InvokeMethod.Result>
        </InvokeMethod>
        
        <!-- Extract Access Token -->
        <Assign DisplayName="Extract Access Token">
          <Assign.To>
            <OutArgument x:TypeArguments="s:String">[AccessToken]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="s:String">[CType(TokenResponse, SalesforceJWT.TokenResponse).access_token]</InArgument>
          </Assign.Value>
        </Assign>
        
        <!-- Extract Instance URL -->
        <Assign DisplayName="Extract Instance URL">
          <Assign.To>
            <OutArgument x:TypeArguments="s:String">[InstanceUrl]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="s:String">[CType(TokenResponse, SalesforceJWT.TokenResponse).instance_url]</InArgument>
          </Assign.Value>
        </Assign>
        
        <!-- Calculate Token Expiry -->
        <Assign DisplayName="Calculate Token Expiry">
          <Assign.To>
            <OutArgument x:TypeArguments="s:DateTime">[TokenExpiry]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="s:DateTime">[DateTime.Now.AddSeconds(CType(TokenResponse, SalesforceJWT.TokenResponse).expires_in)]</InArgument>
          </Assign.Value>
        </Assign>
        
        <ui:LogMessage DisplayName="Token Retrieved Successfully" Level="Info" Message="[&quot;Access token retrieved successfully. Expires at: &quot; + TokenExpiry.ToString()]" />
      </If.Then>
      <If.Else>
        <ui:InvokeWorkflowFile DisplayName="Handle HTTP Error" WorkflowFileName="Activities\HandleError.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <InArgument x:TypeArguments="s:Exception" x:Key="Exception">[New Exception("HTTP Error")]</InArgument>
            <InArgument x:TypeArguments="s:String" x:Key="Context">[&quot;JWT Token Exchange&quot;]</InArgument>
            <InArgument x:TypeArguments="s:Int32" x:Key="StatusCode">[StatusCode]</InArgument>
            <InArgument x:TypeArguments="s:String" x:Key="ResponseBody">[ResponseBody]</InArgument>
            <InArgument x:TypeArguments="s:Boolean" x:Key="EnableDetailedLogging">[True]</InArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
      </If.Else>
    </If>
  </Sequence>
</Activity>
